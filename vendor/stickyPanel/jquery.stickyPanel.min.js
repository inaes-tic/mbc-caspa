(function (e) { var t = { options: { topPadding: 0, afterDetachCSSClass: "", savePanelSpace: false, onDetached: null, onReAttached: null, parentSelector: null }, init: function (n) { var n = e.extend({}, t.options, n); return this.each(function () { var r = Math.ceil(Math.random() * 9999); e(this).data("stickyPanel.state", { stickyPanelId: r, isDetached: false, parentContainer: e(n.parentSelector ? n.parentSelector : window), options: n }); if (n.parentSelector) { var i = e(this).data("stickyPanel.state").parentContainer.css("position"); switch (i) { case "inherit": case "static": e(this).data("stickyPanel.state").parentContainer.css("position", "relative"); break } } e(this).data("stickyPanel.state").parentContainer.bind("scroll.stickyPanel_" + r, { selected: e(this) }, t.scroll) }) }, scroll: function (n) { var r = n.data.selected; var i = r.data("stickyPanel.state").options; var s = r.data("stickyPanel.state").parentContainer; var o = s.height(); var u = r.outerHeight(true); var a = i.parentSelector ? s.scrollTop() : e(document).scrollTop(); var f = i.parentSelector ? s.height() : e(document).height(); var l = i.parentSelector ? o : f - o; var c = r.position().top - i.topPadding; var h = c < 0 ? 0 : c; var p = r.data("stickyPanel.state").isDetached; if (a <= l && a > h && !p) { r.data("stickyPanel.state").isDetached = true; var d = 0; if (i.topPadding != "undefined") { d = d + i.topPadding } var v = i.parentSelector ? r.position().left : r.offset().left; var m = i.parentSelector ? r.position().top : r.offset().top; r.data("PanelsTop", m - d); var g = null; if (i.savePanelSpace == true) { var y = r.outerWidth(true); var b = r.css("float"); var w = r.css("display"); var E = Math.ceil(Math.random() * 9999); r.data("stickyPanel.PanelSpaceID", "stickyPanelSpace" + E); g = e("<div id='" + r.data("stickyPanel.PanelSpaceID") + "' style='width:" + y + "px;height:" + u + "px;float:" + b + ";display:" + w + ";'>&#20;</div>"); r.before(g) } if (i.afterDetachCSSClass != "") { r.addClass(i.afterDetachCSSClass) } r.data("Original_Inline_CSS", !r.attr("style") ? "" : r.attr("style")); r.css({ margin: 0, left: v, top: d, position: i.parentSelector ? "absolute" : "fixed", width: r.outerWidth(false) }); if (i.onDetached) i.onDetached(r, g) } if (i.parentSelector && p) { r.css({ top: i.topPadding ? a + i.topPadding : a }) } if (a <= r.data("PanelsTop") && r.css("top") != "auto" && p) { t.unstick(r) } }, unstick: function (n) { var r = n ? n : this; r.data("stickyPanel.state").isDetached = false; var i = r.data("stickyPanel.state").options; if (i.savePanelSpace == true) { e("#" + r.data("stickyPanel.PanelSpaceID")).remove() } r.attr("style", r.data("Original_Inline_CSS")); if (i.afterDetachCSSClass != "") { r.removeClass(i.afterDetachCSSClass) } if (i.onReAttached) i.onReAttached(r); if (!n) t._unstick(r) }, _unstick: function (e) { e.data("stickyPanel.state").parentContainer.unbind("scroll.stickyPanel_" + e.data("stickyPanel.state").stickyPanelId) } }; e.fn.stickyPanel = function (n) { if (t[n]) { return t[n].apply(this, Array.prototype.slice.call(arguments, 1)) } else if (typeof n === "object" || !n) { return t.init.apply(this, arguments) } else { e.error("Method " + n + " does not exist on jQuery.stickyPanel") } } })(jQuery)